package org.usfirst.frc.team5526.robot;

import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Timer;

/**
 * This is a demo program showing the use of the RobotDrive class, specifically
 * it contains the code necessary to operate a robot with tank drive.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're
 * inexperienced, don't. Unless you know what you are doing, complex code will
 * be much more difficult under this system. Use IterativeRobot or Command-Based
 * instead if you're new.
 */
public class Robot extends IterativeRobot {
	RobotDrive myRobot; // class that handles basic drive
											// operations
	CameraServer server;
	
	AnalogGyro gyro;
	
	Joystick leftStick; // set to ID 1 in DriverStation
	boolean servoGear, solenoidBool1, solenoidBool2, solenoids, straight;
	Servo motorL, motorR, gearPush;
	Solenoid solenoid1, solenoid2;
	AnalogInput leftSensor, rightSensor;
	
	int loop;
	boolean enter;
	double angle;
	
	static final double Kp = 0.03;
	
	public Robot(){
		server = CameraServer.getInstance();
		server.startAutomaticCapture();
	}
	public void robotInit() {
		myRobot = new RobotDrive(0,1);
		leftStick = new Joystick(1);
		motorL = new Servo(5);
		motorR = new Servo(6);
		myRobot.setExpiration(0.1);
		servoGear = true;
		solenoid1 = new Solenoid(0);
		solenoid2 = new Solenoid(1);
		straight = false;
		servoGear = false;
		solenoidBool1 = false;
		solenoidBool2 = false;
		solenoids = false;
		gyro = new AnalogGyro(1);
		//test = new Relay(9); //check PWM number, to be used with planetarium
	}

	public void autonomousInit(){
		angle = 0;
		gyro.reset();
		loop = 0;
		enter = true;
	}
	
	public void autonomousPeriodic(){	
		while(loop < 195){
		angle = gyro.getAngle();
		myRobot.drive(-0.7, -0.0005);
		loop++;
		Timer.delay(0.005);
		}
		if(enter){
		myRobot.stopMotor();
		motorL.set(0.0);
		motorR.set(1.0);
		Timer.delay(1);
		solenoid1.set(false);
		solenoid2.set(true);
		Timer.delay(0.5);
		solenoid1.set(true);
		solenoid2.set(false);
		motorL.set(1.0);
		motorR.set(0.0);
		enter = false;
		}

		/*while(loop < 400 && loop > 200){
			angle = gyro.getAngle();
			myRobot.arcadeDrive(-1.0, -angle*Kp, true);	
			loop++;
			Timer.delay(0.005);
			}
			myRobot.stopMotor();*/
	}
	
	public void teleopinit(){
		
	}
	/**
	 * Runs the motors with tank steering.
	 */
	@Override
	public void teleopPeriodic() {
		myRobot.setSafetyEnabled(true);
		double angle = 0;
		long contInterno = 0, contExterno = 0;
		while(isOperatorControl() && isEnabled()) {
			myRobot.arcadeDrive(leftStick);
			angle = gyro.getAngle();
			
			System.out.println("Interno: "+ contInterno + " Externo: "+ contExterno);
			
			//Buttons
			if(leftStick.getRawButton(11)) servoGear = true;
			if(leftStick.getRawButton(12)) servoGear = false;
			if(leftStick.getRawButton(4)) solenoidBool1 = true;
			if(leftStick.getRawButton(6)) solenoidBool2 = true;
			if(leftStick.getRawButton(3)) solenoids = true;
			if(leftStick.getRawButton(2)) straight = true;
			
			if(straight){
				if(contInterno != contExterno || (contInterno == 0 && contExterno == 0) ){
					gyro.reset();
					contInterno = 0;
					contExterno = 0;
				}
				contInterno++;
				angle = gyro.getAngle();
				myRobot.arcadeDrive(-1.0, -angle*Kp, true);
				Timer.delay(0.01);
			}
			//System.out.println("Angle: "+angle);
			
			//Process Button Bool Values
			if(solenoidBool1){
				solenoid1.set(true);
				solenoid2.set(false);
				solenoidBool1=false;
				solenoidBool2=false;
				solenoids = false;					
			}
			
			if(solenoidBool2){
				solenoid1.set(false);
				solenoid2.set(true);
				solenoidBool2=false;
				solenoidBool1=false;
				solenoids = false;
			}
			
			if(solenoids){
				solenoid1.set(false);
				solenoid2.set(false);
				solenoids = false;
				solenoidBool2=false;
				solenoidBool1=false;
			}
			
			if(servoGear){
				motorL.set(0.0);
				motorR.set(1.0);
			}
			else{
				motorL.set(1.0);
				motorR.set(0.0);
			}
			straight = false;
			contExterno++;
			Timer.delay(0.005); // wait for a motor update time
			
		}
		solenoid1.set(false);
		solenoid2.set(false);
	}
	
	public void testPeriodic(){
		
	}
}
